// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String          @default("")
  email         String?         @unique
  emailVerified DateTime?
  image         String[]        @default([])
  joinedSubs    String[]        @default([])
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Subreddit {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  description String
  image       String?
  bannerImage String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Posts {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  link          String?
  imageURL      String?
  type          String
  postedBy      String
  subredditId   String
  postedByEmail String
  slug          String   @default("")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  votes         Int      @default(0)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Comment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  postSlug      String
  postedByEmail String
  postedByName  String
  content       String
  createdAt     DateTime @default(now())
}
